import React, { useState } from 'react'
import { FaDownload, FaFilePdf, FaFileCsv } from 'react-icons/fa'

export default function ExportBuild({ build, onClose }) {
  const [exportType, setExportType] = useState('pdf')
  const [isExporting, setIsExporting] = useState(false)

  const handleExport = async () => {
    setIsExporting(true)
    
    // TODO: Implement actual export logic
    const exportData = {
      buildName: build.name || `PC Build - ${new Date().toLocaleDateString()}`,
      budget: build.budget,
      totalPrice: build.items.reduce((sum, item) => sum + item.price, 0),
      performance: build.optimal,
      components: build.items,
      timestamp: new Date().toISOString()
    }

    if (exportType === 'csv') {
      exportToCSV(exportData)
    } else {
      exportToPDF(exportData)
    }

    setTimeout(() => {
      setIsExporting(false)
      onClose()
    }, 2000)
  }

  const exportToCSV = (data) => {
    const csvContent = [
      // Header row
      ['Component Type', 'Name', 'Price', 'Link'],
      // Data rows
      ...data.components.map(item => [
        item.category,
        item.name,
        `$${item.price}`,
        item.link
      ]),
      // Summary rows
      ['', '', '', ''],
      ['Total Price:', '', `$${data.totalPrice}`, ''],
      ['Budget:', '', `$${data.budget}`, ''],
      ['Performance Score:', '', `${data.performance}%`, '']
    ].map(row => row.join(',')).join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `${data.buildName.replace(/[^a-z0-9]/gi, '_')}.csv`
    link.click()
    window.URL.revokeObjectURL(url)
  }

  const exportToPDF = (data) => {
    // TODO: Implement PDF export with a library like jsPDF
    // For now, create a simple HTML export that can be printed as PDF
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${data.buildName}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .summary { background: #f5f5f5; padding: 15px; margin-bottom: 20px; }
          .components { margin-bottom: 20px; }
          table { width: 100%; border-collapse: collapse; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #a259ff; color: white; }
          .footer { margin-top: 30px; text-align: center; color: #666; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>${data.buildName}</h1>
          <p>Generated on ${new Date().toLocaleDateString()}</p>
        </div>
        
        <div class="summary">
          <h2>Build Summary</h2>
          <p><strong>Budget:</strong> $${data.budget}</p>
          <p><strong>Total Price:</strong> $${data.totalPrice}</p>
          <p><strong>Performance Score:</strong> ${data.performance}%</p>
          <p><strong>Budget Utilization:</strong> ${((data.totalPrice / data.budget) * 100).toFixed(1)}%</p>
        </div>
        
        <div class="components">
          <h2>Components</h2>
          <table>
            <thead>
              <tr>
                <th>Component Type</th>
                <th>Name</th>
                <th>Price</th>
                <th>Vendor Link</th>
              </tr>
            </thead>
            <tbody>
              ${data.components.map(item => `
                <tr>
                  <td>${item.category}</td>
                  <td>${item.name}</td>
                  <td>$${item.price}</td>
                  <td><a href="${item.link}" target="_blank">View Product</a></td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        </div>
        
        <div class="footer">
          <p>Generated by PC Build Generator</p>
          <p>Visit us at pcbuildgenerator.com for more builds</p>
        </div>
      </body>
      </html>
    `

    const blob = new Blob([htmlContent], { type: 'text/html' })
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `${data.buildName.replace(/[^a-z0-9]/gi, '_')}.html`
    link.click()
    window.URL.revokeObjectURL(url)
  }

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-card-bg border border-border-muted rounded-xl p-6 w-full max-w-md">
        <h3 className="text-xl font-bold text-white mb-4">Export Build</h3>
        
        <div className="space-y-4 mb-6">
          <div>
            <label className="block text-text-main font-medium mb-2">Export Format</label>
            <div className="space-y-2">
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="exportType"
                  value="pdf"
                  checked={exportType === 'pdf'}
                  onChange={(e) => setExportType(e.target.value)}
                  className="text-accent focus:ring-accent"
                />
                <FaFilePdf className="text-red-500" />
                <span className="text-text-main">PDF Document</span>
              </label>
              
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="exportType"
                  value="csv"
                  checked={exportType === 'csv'}
                  onChange={(e) => setExportType(e.target.value)}
                  className="text-accent focus:ring-accent"
                />
                <FaFileCsv className="text-green-500" />
                <span className="text-text-main">CSV Spreadsheet</span>
              </label>
            </div>
          </div>

          <div className="bg-accent/10 border border-accent/20 rounded-lg p-3">
            <p className="text-text-main text-sm">
              {exportType === 'pdf' 
                ? 'Export as a formatted HTML document that can be saved as PDF'
                : 'Export component data as a CSV file for use in spreadsheet applications'
              }
            </p>
          </div>
        </div>

        <div className="flex gap-3">
          <button
            onClick={handleExport}
            disabled={isExporting}
            className="flex-1 bg-accent text-white font-semibold py-3 px-4 rounded-lg transition-all duration-200 hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            {isExporting ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                Exporting...
              </>
            ) : (
              <>
                <FaDownload />
                Export {exportType.toUpperCase()}
              </>
            )}
          </button>
          
          <button
            onClick={onClose}
            className="px-4 py-3 border border-border-muted text-text-sub rounded-lg hover:bg-bg transition-colors duration-200"
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  )
}